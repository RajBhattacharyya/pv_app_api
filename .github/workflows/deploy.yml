```yml
name: Deploy to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeouts:
      # Add a timeout to prevent the workflow from hanging indefinitely
      run: 2h

    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Determine changed files to optimize the deployment process
      - name: Determine Changed Files
        run: |
          # Use git diff to find changed files, ignoring whitespace differences
          changed_files=$(git diff --name-only --ignore-space-at-eol HEAD~1..HEAD)
          has_package_json_changed=$(git diff --name-only --ignore-space-at-eol HEAD~1..HEAD | grep -q "package.json" && echo "true" || echo "false")
          has_relevant_files_changed=$(git diff --name-only --ignore-space-at-eol HEAD~1..HEAD | grep -qE '(.js|.jsx|.css|.scss)|package.json' && echo "true" || echo "false")
          echo "::set-output name=changed_files::$changed_files"
          echo "::set-output name=has_package_json_changed::$has_package_json_changed"
          echo "::set-output name=has_relevant_files_changed::$has_relevant_files_changed"
        id: changed_files_step

      # Only proceed with deployment if there are changes
      - name: Check for Changes
        run: |
          if [ "${{ steps.changed_files_step.outputs.changed_files }}" == "" ]; then
            echo "No changes detected, exiting workflow"
            exit 0
          fi
          echo "Proceeding with deployment due to changes in: ${{ steps.changed_files_step.outputs.changed_files }}"

      # Add SSH key for EC2 connection
      - name: Add SSH Key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # Install dependencies, build application, copy changed files, and restart in a single SSH connection
      - name: Deploy and Validate Application
        run: |
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
          cd /home/ec2-user/pv_app_api

          # Only run npm install if package.json has changed or if this is the first deployment
          if [ -z "$(npm ls)" ] || [ "${{ steps.changed_files_step.outputs.has_package_json_changed }}" == "true" ]; then
            # Use caching for npm install to avoid reinstalling dependencies on every workflow run
            npm install --production --only=production --prefer-offline --cache-min 999999 # use --prefer-offline to reduce network usage
          fi

          # Only run npm run build if any of the relevant files have changed
          if [ "${{ steps.changed_files_step.outputs.has_relevant_files_changed }}" == "true" ]; then
            # Run npm run build with --if-present to avoid error if no build script
            npm run build --if-present --prefix ./ & # specify the prefix to avoid unnecessary builds
          fi

          # Wait for npm run build to complete
          wait

          # Copy only changed files
          if [ -n "${{ steps.changed_files_step.outputs.changed_files }}" ]; then
            # Use rsync with --delete to remove deleted files and reduce data transfer
            rsync -avz --progress --delete --compress ${{ steps.changed_files_step.outputs.changed_files }} . # add --compress to reduce data transfer
          fi

          # Check if the application is already running, then restart
          if pm2 status | grep -q "app.js"; then
            pm2 restart app.js -i 0
          else
            pm2 start app.js -i 0
          fi

          pm2 status
          EOF
          # Log the SSH connection output for visibility
          echo "SSH connection output: $?"

      # Health check to ensure the application is running correctly
      - name: Health Check
        run: |
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
          cd /home/ec2-user/pv_app_api
          # Implement retry logic for critical steps, such as the health check
          for i in {1..3}; do
            curl -s -o /dev/null -w "%{http_code}" --connect-timeout 5 http://localhost:3000/healthcheck # add a timeout to prevent hanging
            if [ $? -eq 0 ]; then
              break
            fi
            sleep 5
          done
          EOF
          # Log the HTTP status code
          echo "HTTP status code: $?"

      # Error handling: Fail the workflow if any step fails
      - name: Error Handling
        run: |
          if [ $? -ne 0 ]; then
            echo "Workflow failed with error code $?"
            # Implement automated rollback
            ssh -o "StrictHostKeyChecking=no" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            cd /home/ec2-user/pv_app_api
            # Stop the current application instance
            pm2 stop app.js
            # Restore the previous application version
            git checkout HEAD~1
            # Restart the application
            pm2 start app.js -i 0
            EOF
            exit 1
          fi

      # Final check to ensure the application is running correctly after deployment
      - name: Final Health Check
        run: |
          ssh -o "StrictHostKeyChecking=no" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
          cd /home/ec2-user/pv_app_api
          # Implement retry logic for critical steps, such as the final health check
          for i in {1..3}; do
            curl -s -o /dev/null -w "%{http_code}" --connect-timeout 5 http://localhost:3000/healthcheck # add a timeout to prevent hanging
            if [ $? -eq 0 ]; then
              break
            fi
            sleep 5
          done
          EOF
          # Log the HTTP status code
          echo "HTTP status code: $?"

# Removed unnecessary comments and steps for better readability and efficiency
```