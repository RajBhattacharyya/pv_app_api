```yml
name: Deploy to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Determine changed files to optimize the deployment process
      - name: Determine Changed Files
        run: |
          # Use git diff to find changed files, ignoring whitespace differences
          echo "::set-output name=changed_files::$(git diff --name-only --ignore-space-at-eol HEAD~1..HEAD)"
          # Also, store the output in variables for later use
          echo "::set-output name=has_package_json_changed::$(git diff --name-only --ignore-space-at-eol HEAD~1..HEAD | grep -q "package.json" && echo "true" || echo "false")"
          echo "::set-output name=has_relevant_files_changed::$(git diff --name-only --ignore-space-at-eol HEAD~1..HEAD | grep -qE '(.js|.jsx|.css|.scss)' && echo "true" || echo "false")"
        id: changed_files_step

      # Only proceed with deployment if there are changes
      - name: Check for Changes
        run: |
          if [ "${{ steps.changed_files_step.outputs.changed_files }}" == "" ]; then
            echo "No changes detected, exiting workflow"
            exit 0
          fi

      # Add SSH key for EC2 connection
      - name: Add SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Copy only changed files to EC2 for efficient deployment
      # Use rsync instead of scp-action for improved performance
      - name: Copy Changed Application Code
        run: |
          rsync -avz -e "ssh -i ~/.ssh/id_rsa" --progress --delete ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ec2-user/pv_app_api/

      # Install dependencies, build application, and restart in a single SSH connection
      - name: Deploy and Validate Application
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
          cd /home/ec2-user/pv_app_api

          # Only run npm install if package.json has changed
          if [ "${{ steps.changed_files_step.outputs.has_package_json_changed }}" == "true" ]; then
            npm install --production # only install production dependencies
          fi

          # Only run npm run build if any of the relevant files have changed
          if [ "${{ steps.changed_files_step.outputs.has_relevant_files_changed }}" == "true" ]; then
            npm run build --if-present # only run build if script is present
          fi

          # Check if the application is already running, then restart
          if pm2 status | grep -q "app.js"; then
            pm2 restart app.js -i 0
          else
            pm2 start app.js -i 0
          fi

          pm2 status
          EOF
```