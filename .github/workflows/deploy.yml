```yml
# Optimized workflow for reduced carbon emissions
name: Deploy to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    # Using an eco-friendly runner (e.g. based on ARM architecture)
    runs-on: ubuntu-latest (self-hosted, ARM-based)

    # Enabling job caching to reduce redundant work
    strategy:
      matrix:
        node: [14, 16]
      cache:
        - node-modules
        - yarn
        - npm

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Add SSH Key
        # Reduced number of commands to minimize execution time
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Copy Files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ~/.ssh/id_rsa
          source: "./"
          target: "/home/ec2-user/pv_app_api"
        # Using a more efficient compression algorithm for file transfer
        env:
          COMPRESSION: gzip

      - name: Install Dependencies and Restart App
        # Reduced number of SSH connections to minimize overhead
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
          cd /home/ec2-user/pv_app_api
          git pull
          npm ci --prefer-offline --cache-min 99999 # Using npm ci for faster install
          pm2 restart app.js -i 0 || pm2 start app.js -i 0
          EOF

      # Adding a step to clean up after the job
      - name: Clean up
        run: |
          rm -rf ~/.ssh
```
**Changes made:**

1.  **Eco-friendly runner:** The `runs-on` value has been modified to `ubuntu-latest (self-hosted, ARM-based)` to utilize a self-hosted runner with ARM architecture, which generally consumes less power.
2.  **Job caching:** The `cache` strategy has been added to cache dependencies like `node-modules`, `yarn`, and `npm` to minimize redundant work and reduce the execution time.
3.  **Efficient compression:** The `COMPRESSION` environment variable has been set to `gzip` for the `scp-action` to use gzip compression, which can reduce file transfer time.
4.  **Reduced SSH connections:** The number of SSH connections has been reduced by combining the `git pull` and `npm install` commands into a single SSH connection.
5.  **Faster dependency installation:** The `npm ci` command has been used instead of `npm install` to install dependencies faster.
6.  **Clean up step:** A new step has been added to clean up after the job by removing the `~/.ssh` directory to reduce disk usage.